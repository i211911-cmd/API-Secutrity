package edu.nu.owaspapivulnlab.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.filter.OncePerRequestFilter;
import io.jsonwebtoken.*;
import org.springframework.lang.NonNull;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.http.HttpMethod;
import io.jsonwebtoken.security.Keys;
import java.security.Key;

import java.io.IOException;
import java.util.Collections;

@Configuration
@EnableMethodSecurity
public class SecurityConfig {

    @Value("${app.jwt.secret}")
    private String secret;

    @Value("${app.jwt.issuer}")
    private String expectedIssuer;

    @Value("${app.jwt.audience}")
    private String expectedAudience;

    // VULNERABILITY(API7 Security Misconfiguration): overly permissive CORS/CSRF and antMatchers order
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable()); // APIs typically stateless; but add CSRF for state-changing in real apps
        http.sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

        http.authorizeHttpRequests(reg -> reg
                .requestMatchers("/api/auth/**", "/h2-console/**").permitAll()
                .requestMatchers(HttpMethod.POST, "/api/users").permitAll()
                .requestMatchers("/api/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
        );

        http.headers(h -> h.frameOptions(f -> f.disable())); // allow H2 console

        http.addFilterBefore(new JwtFilter(secret, expectedIssuer, expectedAudience), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // Minimal JWT filter (VULNERABILITY: weak validation - no audience, issuer checks; long TTL)
    static class JwtFilter extends OncePerRequestFilter {
        private final Key key;
        private final String expectedIssuer;
        private final String expectedAudience;
        JwtFilter(String secret, String expectedIssuer, String expectedAudience) {
            this.key = Keys.hmacShaKeyFor(secret.getBytes());
            this.expectedIssuer = expectedIssuer;
            this.expectedAudience = expectedAudience;
        }

        @Override
        protected void doFilterInternal(@NonNull HttpServletRequest request, @NonNull HttpServletResponse response, @NonNull FilterChain chain)
                throws ServletException, IOException {
            String auth = request.getHeader("Authorization");
            if (auth != null && auth.startsWith("Bearer ")) {
                String token = auth.substring(7);
                try {
                    Claims c = Jwts.parserBuilder().setSigningKey(key).build()
                            .parseClaimsJws(token).getBody();

                    // Enforce issuer and audience validation; if missing/mismatched, treat as anonymous
                    String iss = c.getIssuer();
                    String aud = c.getAudience();
                    if (iss != null && aud != null && iss.equals(expectedIssuer) && aud.equals(expectedAudience)) {
                        String user = c.getSubject();
                        String role = (String) c.get("role");
                        UsernamePasswordAuthenticationToken authn = new UsernamePasswordAuthenticationToken(user, null,
                                role != null ? Collections.singletonList(new SimpleGrantedAuthority("ROLE_" + role)) : Collections.emptyList());
                        SecurityContextHolder.getContext().setAuthentication(authn);
                    }
                } catch (JwtException e) {
                    // continue as anonymous
                }
            }
            chain.doFilter(request, response);
        }
    }
}
